import React, { useState, FC, Dispatch, SetStateAction } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { AlertTriangle } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { ReportData, VulnerabilityData } from './types';
import RichTextEditor from '@/components/ui/rich-text-editor';

interface VulnerabilityManagerProps {
  reportData: ReportData;
  setReportData: Dispatch<SetStateAction<ReportData>>;
  currentVulnerability: Omit<VulnerabilityData, 'id'>;
  setCurrentVulnerability: Dispatch<SetStateAction<Omit<VulnerabilityData, 'id'>>>;
}

const VulnerabilityManager: FC<VulnerabilityManagerProps> = ({ 
  reportData, 
  setReportData, 
  currentVulnerability,
  setCurrentVulnerability 
}) => {
  const { toast } = useToast();


  const addVulnerability = () => {
    const newVulnerability: VulnerabilityData = {
      ...currentVulnerability,
      id: Date.now().toString()
    };
    setReportData(prev => ({
      ...prev,
      vulnerabilities: [...prev.vulnerabilities, newVulnerability]
    }));
    setCurrentVulnerability({
      riskLevel: '中危',
      name: '',
      description: '',
      process: '',
      advice: ''
    });
    toast({ title: "漏洞已添加", description: "新的安全漏洞已成功添加到报告中" });
  };

  const removeVulnerability = (id: string) => {
    setReportData(prev => ({ ...prev, vulnerabilities: prev.vulnerabilities.filter(v => v.id !== id) }));
  };

  const getRiskColor = (risk: string) => {
    if (risk === '高危') return 'bg-red-600';
    if (risk === '中危') return 'bg-yellow-500';
    return 'bg-green-500';
  };

  return (
    <div className="space-y-6">
      <Card className="bg-slate-800/50 backdrop-blur border-slate-700">
        <CardContent className="space-y-4 mt-5">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                    <Label htmlFor="vulnName" className="text-white">漏洞名称</Label>
                    <Input id="vulnName" value={currentVulnerability.name} onChange={(e) => setCurrentVulnerability(prev => ({ ...prev, name: e.target.value }))} placeholder="例如：SQL注入漏洞" className="bg-slate-700 border-slate-600 text-white" />
                </div>
                <div>
                    <Label htmlFor="riskLevel" className="text-white">漏洞危害级别</Label>
                    <Select value={currentVulnerability.riskLevel} onValueChange={(value) => setCurrentVulnerability(prev => ({ ...prev, riskLevel: value as any }))}>
                        <SelectTrigger className="bg-slate-700 border-slate-600 text-white hover:bg-slate-600 hover:text-white"><SelectValue /></SelectTrigger>
                        <SelectContent className="bg-slate-700 border-slate-600 text-white">
                            <SelectItem value="高危">高危</SelectItem>
                            <SelectItem value="中危">中危</SelectItem>
                            <SelectItem value="低危">低危</SelectItem>
                        </SelectContent>
                    </Select>
                </div>
            </div>
            <div>
                <Label htmlFor="vulnDescription" className="text-white">漏洞风险描述</Label>
                <Textarea id="vulnDescription" value={currentVulnerability.description} onChange={(e) => setCurrentVulnerability(prev => ({ ...prev, description: e.target.value }))} placeholder="详细描述漏洞的风险和可能造成的影响..." className="bg-slate-700 border-slate-600 text-white" />
            </div>
            <div>
                <Label htmlFor="vulnProcess" className="text-white">漏洞发现过程</Label>
                <RichTextEditor
                    value={currentVulnerability.process}
                    onChange={(value) => setCurrentVulnerability(prev => ({ ...prev, process: value }))}
                    className="bg-slate-700 border-slate-600 text-white"
                />
            </div>
            <div>
                <Label htmlFor="vulnAdvice" className="text-white">漏洞整改建议</Label>
                <Textarea id="vulnAdvice" value={currentVulnerability.advice} onChange={(e) => setCurrentVulnerability(prev => ({ ...prev, advice: e.target.value }))} placeholder="提供修复该漏洞的具体建议和解决方案..." className="bg-slate-700 border-slate-600 text-white" />
            </div>
            <Button onClick={addVulnerability} className="w-full text-lg py-6 bg-blue-600 hover:bg-blue-700">添加此漏洞</Button>
        </CardContent>
      </Card>

      {reportData.vulnerabilities.length > 0 && (
        <Card className="bg-slate-800/50 backdrop-blur border-slate-700">
          <CardHeader>
            <CardTitle className="text-white">已添加的漏洞 ({reportData.vulnerabilities.length})</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {reportData.vulnerabilities.map((vuln) => (
                <div key={vuln.id} className="bg-slate-700/50 p-4 rounded-lg border border-slate-600">
                  <div className="flex items-center justify-between mb-2">
                    <h4 className="text-white font-medium">{vuln.name}</h4>
                    <div className="flex items-center gap-x-4">
                      <Badge className={`${getRiskColor(vuln.riskLevel)} text-white flex items-center gap-x-1`}>
                        {<AlertTriangle className="w-4 h-4" />} {vuln.riskLevel}
                      </Badge>
                      <Button variant="destructive" size="sm" onClick={() => removeVulnerability(vuln.id)}>删除</Button>
                    </div>
                  </div>
                  <p className="text-slate-300 text-sm">{vuln.description}</p>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default VulnerabilityManager;
